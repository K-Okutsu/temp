y <- cacheSolve(x)
mx %*% y
x
y
## The overall script creates two functions, the first creating a matrix that is cached
## for potential later use, in theory helping to reduce redudancy and computing cost. The
## second function will call on the first function from the cache
## defines "makeCacheMatrix" creates a matrix function that can cache it's inverse, will
## be used later by cacheSolve function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m <<- NULL
}
get <- function () x
setmatrix <- function(mean) m<<- solve
getmatrix <- function() m
list(set=set, get=get,
setmatrix = setmatrix,
getmatrix = getmatrix)
## defines set and get for user input and retrieval per user specification
}
## defines "cacheSolve" which creates a function that will compute or 'solve' the
## inverse of a special matrix from the above function
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
## checks if m is populated from cacheMatrix
}
matrix <- x$get()
## retrives set() values i.e.x$get() outputs: [1] 2 3 (defined by
## x <- makeCacheMatrix earlier)
m <- solve(data, ...)
x$setmatrix(m)
## i.e. x <- makeCacheMatrix(c(2,3))
m
## returns value of m
}
mx <- matrix(rnorm(16),4,4)
x <- makeCacheMatrix(mx)
y <- cacheSolve(x)
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
## checks if m is populated from cacheMatrix
}
matrix <- x$get()
## retrives set() values i.e.x$get() outputs: [1] 2 3 (defined by
## x <- makeCacheMatrix earlier)
m <- solve(data, ...)
x$setmatrix(m)
## i.e. x <- makeCacheMatrix(c(2,3))
m
## returns value of m
}
y <- cacheSolve(x)
## The following functions cache the inverse of a matrix.
## These will drastically reduce the time required to compute matrix inversion.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
## m is set to NULL when the function is called for the first time.
m <- NULL
## set the value of the matrix
set <- function(y) {
## Assigning x the value of y. Search the parent environments to
## find the x that was passed to the function makeCacheMatrix()
## when it is called for this variable.
## When a new matrix is set, x and m are reset to y and NULL
## respectively.
x <<- y
m <<- NULL
}
## get the value of the matrix
get <- function() x
## set the value of the solution of the matrix
setsolve <- function(solve) m <<- solve
## get the value of the solution of the matrix
getsolve <- function() m
## The makeCacheMatrix contains copies of matrix - set and get
## and vectors - setsolve and getsolve.
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inversee has already been calculated
## (and the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
## get m from x, which is the object returned from makeCacheMatrix
m <- x$getsolve()
## if m is not null (meaning m has been calculated before with current data)
if(!is.null(m)) {
## a message will appear
message("getting cached inverse")
## and the m value calculated before will be returned
return(m)
}
## if m is null (meaning m has not been calculated before or new data
## is assigned to the object)
data <- x$get()
## retrieve the new data, and solve the matrix
m <- solve(data, ...)
## save the solution to x
x$setsolve(m)
## Return a matrix that is the inverse of 'x'
m
}
mx <- matrix(rnorm(16),4,4)
x <- makeCacheMatrix(mx)
y <- cacheSolve(x)
x
y
mx <- matrix(rnorm(16),4,4)
x <- makeCacheMatrix(mx)
y <- cacheSolve(x)
mx
mx %*% y
#makeCacheMatrix is a function to create 4 sub functions returned
##as a list.
##sub functions are used to interact with scope variables
makeCacheMatrix <- function(x = matrix()) {
#Declare inv as Null
inv <- NULL
set <- function(y) {
#Allows new matrix to be set in function
#clears previous inv value
x <<- y
inv <<- NULL
}
#allow retrival of matrix
get <- function() x
#enable setting inverse of x
setInv <- function(x) inv <<-solve(x)
#enable retrival of inverse of x
getInv <- function() inv
#Generate variables accessabe from
# a different environment
list(set=set, get=get,
setInv=setInv,
getInv=getInv)
}
## cacheSolve returns the inverse of the previous functions matrix
## If the inverse has already been set, it is collected from the cache
## If the inverse has not been set, it calculates it
## An inversed matrix is returned.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# if one has been set in cache
m <- x$getInv()
##If inverse in cache -> get cached version
if(!is.null(m)) {
message("getting cached data")
} else {
## Inverse not in cache!
## Set inversion in cache, also allocate to m
m <- x$setInv(x$get())
}
# make cache inversion available from this function
return(m)
}
mx <- matrix(rnorm(16),4,4)
x <- makeCacheMatrix(mx)
y <- cacheSolve(x)
mx %*% y
library(swirl)
swirl()
bye()
info()
main()
swirl()
num_vect <- c(0.5,55,-10,6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char,"Kaz")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4, sep= "-")
args()
args(list.files)
bye()
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
my_data/0
0/0
Inf - Inf
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(1,3,5)
[c(3,5,7)]
x([c(3,5,7)])
x([c(F,F,T,F,T,F,T)])
x([c(F,F,T,F,T,F,T)])
print()
x?
;
x[3 5 7]
x[c(1 2)]
x[c(1, 2)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
if TRUE == TRUE
TRUE == TRUE
(FALSE==TRUE)==FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | C(T,F,F)
TRUE | C(TRUE,FALSE,FALSE)
TRUE | C(TRUE, FALSE, FALSE)
TRUE | C(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints < 0)
all(ints > 0)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
head(flgs)
head(flags)
dim(flags)
class(flags)
library(swirl)
swirl()
bye()
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:6,10)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size =100, prob = 0.7)
flips2 <- rbinom(1, size =100, prob = 0.7)
flips2 <- rbinom(100, size =1, prob = 0.7)
rflips2
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pos
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
bye()
exit
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() -t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlb＝"Speed")
plot(x = cars$speed, y = cars$dist, xlab ＝ "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
?plot
Load(mtcars)
data(mtcars)
?boxplot
boxplot(mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
mtcars
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z *2 + 100
my_sqrt <- sqrt( z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z *2 + 1000
my_div
getwd()
setwd("./temp")
setwd("./")
getwd()
setwd("./R")
getwd()
setwd("../")
getwd()
setwd("/Users/Kazushige/temp/")
getwd()
setwd("C:/Users/Kazushige/temp/")
setwd("C:/Users/Kazushige/Documents/")
getwd()
if(!file.exists("temp")){
dir.create("temp")
}
getwd()
setwd("C:/Users/Kazushige/temp/")
getwd()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
list.files("./data")if(!file.exists("temp")){
dir.create("temp")
}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
list.files("./data")if(!file.exists("temp")){
dir.create("temp")
}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
list.files("./data")
getwd()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv")
list.files("./data")
list.files("./data")
setwd("C:/Users/Kazushige/temp/")
list.files("./data")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv")
list.files("./data")
getwd()
dateDownloaded <- date()
dateDownloaded
